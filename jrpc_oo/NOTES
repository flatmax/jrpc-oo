/add JRPCExport.js JRPCNodeClient.js JRPCServer.js ExposeClass.js JRPCCommon.js tests/Client1.js tests/JRPCServerTestConcurrent.js tests/Client2.js jrpc_oo/pyproject.toml

In the jrpc_oo directory, using the packages installed in the toml file, implement the same functionality in python which is there for javascript. The general structure of the software is that once the client connects to a server, both the server and the client call 'system.listComponents' to find out what class.method RPCs each other provide. The Server can have many clients (or remotes) connected, despite this, use the same multi remote RPC structure for both the client and the server, despite the fact that the client only connects to one server. Put the common code in the common code class. JRPCCommon::setupFns is the common setup code in javascript. If "jsonrpclib-pelix" doesn't support websockets, then implement your own jrpc2 messaging in a new JRPC2.py file. If necessary JRPC2.py. Don't implement any SSL code, assume ws connection without encryption. If you need to use asyncio, add it to the toml file.